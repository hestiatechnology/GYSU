// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        (unknown)
// source: hestia/jobfair/company/v1/companies.proto

package company

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/gofeaturespb"
	common "hestia/jobfair/api/pb/common"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Location struct {
	state                 protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Address    string                 `protobuf:"bytes,1,opt,name=address"`
	xxx_hidden_Locality   string                 `protobuf:"bytes,2,opt,name=locality"`
	xxx_hidden_PostalCode string                 `protobuf:"bytes,3,opt,name=postal_code,json=postalCode"`
	xxx_hidden_Country    string                 `protobuf:"bytes,4,opt,name=country"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *Location) Reset() {
	*x = Location{}
	mi := &file_hestia_jobfair_company_v1_companies_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Location) ProtoMessage() {}

func (x *Location) ProtoReflect() protoreflect.Message {
	mi := &file_hestia_jobfair_company_v1_companies_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Location) GetAddress() string {
	if x != nil {
		return x.xxx_hidden_Address
	}
	return ""
}

func (x *Location) GetLocality() string {
	if x != nil {
		return x.xxx_hidden_Locality
	}
	return ""
}

func (x *Location) GetPostalCode() string {
	if x != nil {
		return x.xxx_hidden_PostalCode
	}
	return ""
}

func (x *Location) GetCountry() string {
	if x != nil {
		return x.xxx_hidden_Country
	}
	return ""
}

func (x *Location) SetAddress(v string) {
	x.xxx_hidden_Address = v
}

func (x *Location) SetLocality(v string) {
	x.xxx_hidden_Locality = v
}

func (x *Location) SetPostalCode(v string) {
	x.xxx_hidden_PostalCode = v
}

func (x *Location) SetCountry(v string) {
	x.xxx_hidden_Country = v
}

type Location_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Address    string
	Locality   string
	PostalCode string
	// Must be a Alpha-2 code
	Country string
}

func (b0 Location_builder) Build() *Location {
	m0 := &Location{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Address = b.Address
	x.xxx_hidden_Locality = b.Locality
	x.xxx_hidden_PostalCode = b.PostalCode
	x.xxx_hidden_Country = b.Country
	return m0
}

type Company struct {
	state                    protoimpl.MessageState  `protogen:"opaque.v1"`
	xxx_hidden_Id            string                  `protobuf:"bytes,1,opt,name=id"`
	xxx_hidden_Name          string                  `protobuf:"bytes,2,opt,name=name"`
	xxx_hidden_Photo         *string                 `protobuf:"bytes,3,opt,name=photo"`
	xxx_hidden_Stand         *string                 `protobuf:"bytes,4,opt,name=stand"`
	xxx_hidden_Address       *string                 `protobuf:"bytes,5,opt,name=address"`
	xxx_hidden_Description   string                  `protobuf:"bytes,6,opt,name=description"`
	xxx_hidden_Interests     *[]*common.Interest     `protobuf:"bytes,7,rep,name=interests"`
	xxx_hidden_ContractTypes *[]*common.ContractType `protobuf:"bytes,8,rep,name=contract_types,json=contractTypes"`
	xxx_hidden_Visited       bool                    `protobuf:"varint,9,opt,name=visited"`
	XXX_raceDetectHookData   protoimpl.RaceDetectHookData
	XXX_presence             [1]uint32
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *Company) Reset() {
	*x = Company{}
	mi := &file_hestia_jobfair_company_v1_companies_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Company) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Company) ProtoMessage() {}

func (x *Company) ProtoReflect() protoreflect.Message {
	mi := &file_hestia_jobfair_company_v1_companies_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Company) GetId() string {
	if x != nil {
		return x.xxx_hidden_Id
	}
	return ""
}

func (x *Company) GetName() string {
	if x != nil {
		return x.xxx_hidden_Name
	}
	return ""
}

func (x *Company) GetPhoto() string {
	if x != nil {
		if x.xxx_hidden_Photo != nil {
			return *x.xxx_hidden_Photo
		}
		return ""
	}
	return ""
}

func (x *Company) GetStand() string {
	if x != nil {
		if x.xxx_hidden_Stand != nil {
			return *x.xxx_hidden_Stand
		}
		return ""
	}
	return ""
}

func (x *Company) GetAddress() string {
	if x != nil {
		if x.xxx_hidden_Address != nil {
			return *x.xxx_hidden_Address
		}
		return ""
	}
	return ""
}

func (x *Company) GetDescription() string {
	if x != nil {
		return x.xxx_hidden_Description
	}
	return ""
}

func (x *Company) GetInterests() []*common.Interest {
	if x != nil {
		if x.xxx_hidden_Interests != nil {
			return *x.xxx_hidden_Interests
		}
	}
	return nil
}

func (x *Company) GetContractTypes() []*common.ContractType {
	if x != nil {
		if x.xxx_hidden_ContractTypes != nil {
			return *x.xxx_hidden_ContractTypes
		}
	}
	return nil
}

func (x *Company) GetVisited() bool {
	if x != nil {
		return x.xxx_hidden_Visited
	}
	return false
}

func (x *Company) SetId(v string) {
	x.xxx_hidden_Id = v
}

func (x *Company) SetName(v string) {
	x.xxx_hidden_Name = v
}

func (x *Company) SetPhoto(v string) {
	x.xxx_hidden_Photo = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 9)
}

func (x *Company) SetStand(v string) {
	x.xxx_hidden_Stand = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 9)
}

func (x *Company) SetAddress(v string) {
	x.xxx_hidden_Address = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 9)
}

func (x *Company) SetDescription(v string) {
	x.xxx_hidden_Description = v
}

func (x *Company) SetInterests(v []*common.Interest) {
	x.xxx_hidden_Interests = &v
}

func (x *Company) SetContractTypes(v []*common.ContractType) {
	x.xxx_hidden_ContractTypes = &v
}

func (x *Company) SetVisited(v bool) {
	x.xxx_hidden_Visited = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 8, 9)
}

func (x *Company) HasPhoto() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *Company) HasStand() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *Company) HasAddress() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *Company) HasVisited() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 8)
}

func (x *Company) ClearPhoto() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_Photo = nil
}

func (x *Company) ClearStand() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_Stand = nil
}

func (x *Company) ClearAddress() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_Address = nil
}

func (x *Company) ClearVisited() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 8)
	x.xxx_hidden_Visited = false
}

type Company_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Id            string
	Name          string
	Photo         *string
	Stand         *string
	Address       *string
	Description   string
	Interests     []*common.Interest
	ContractTypes []*common.ContractType
	Visited       *bool
}

func (b0 Company_builder) Build() *Company {
	m0 := &Company{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Id = b.Id
	x.xxx_hidden_Name = b.Name
	if b.Photo != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 9)
		x.xxx_hidden_Photo = b.Photo
	}
	if b.Stand != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 9)
		x.xxx_hidden_Stand = b.Stand
	}
	if b.Address != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 9)
		x.xxx_hidden_Address = b.Address
	}
	x.xxx_hidden_Description = b.Description
	x.xxx_hidden_Interests = &b.Interests
	x.xxx_hidden_ContractTypes = &b.ContractTypes
	if b.Visited != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 8, 9)
		x.xxx_hidden_Visited = *b.Visited
	}
	return m0
}

type CreateCompanyRequest struct {
	state                    protoimpl.MessageState  `protogen:"opaque.v1"`
	xxx_hidden_Name          *string                 `protobuf:"bytes,1,opt,name=name"`
	xxx_hidden_Photo         *string                 `protobuf:"bytes,2,opt,name=photo"`
	xxx_hidden_Stand         *string                 `protobuf:"bytes,3,opt,name=stand"`
	xxx_hidden_Address       *Location               `protobuf:"bytes,4,opt,name=address"`
	xxx_hidden_Description   *string                 `protobuf:"bytes,5,opt,name=description"`
	xxx_hidden_Interests     *[]*common.Interest     `protobuf:"bytes,6,rep,name=interests"`
	xxx_hidden_ContractTypes *[]*common.ContractType `protobuf:"bytes,7,rep,name=contract_types,json=contractTypes"`
	XXX_raceDetectHookData   protoimpl.RaceDetectHookData
	XXX_presence             [1]uint32
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *CreateCompanyRequest) Reset() {
	*x = CreateCompanyRequest{}
	mi := &file_hestia_jobfair_company_v1_companies_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateCompanyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCompanyRequest) ProtoMessage() {}

func (x *CreateCompanyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hestia_jobfair_company_v1_companies_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *CreateCompanyRequest) GetName() string {
	if x != nil {
		if x.xxx_hidden_Name != nil {
			return *x.xxx_hidden_Name
		}
		return ""
	}
	return ""
}

func (x *CreateCompanyRequest) GetPhoto() string {
	if x != nil {
		if x.xxx_hidden_Photo != nil {
			return *x.xxx_hidden_Photo
		}
		return ""
	}
	return ""
}

func (x *CreateCompanyRequest) GetStand() string {
	if x != nil {
		if x.xxx_hidden_Stand != nil {
			return *x.xxx_hidden_Stand
		}
		return ""
	}
	return ""
}

func (x *CreateCompanyRequest) GetAddress() *Location {
	if x != nil {
		return x.xxx_hidden_Address
	}
	return nil
}

func (x *CreateCompanyRequest) GetDescription() string {
	if x != nil {
		if x.xxx_hidden_Description != nil {
			return *x.xxx_hidden_Description
		}
		return ""
	}
	return ""
}

func (x *CreateCompanyRequest) GetInterests() []*common.Interest {
	if x != nil {
		if x.xxx_hidden_Interests != nil {
			return *x.xxx_hidden_Interests
		}
	}
	return nil
}

func (x *CreateCompanyRequest) GetContractTypes() []*common.ContractType {
	if x != nil {
		if x.xxx_hidden_ContractTypes != nil {
			return *x.xxx_hidden_ContractTypes
		}
	}
	return nil
}

func (x *CreateCompanyRequest) SetName(v string) {
	x.xxx_hidden_Name = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 7)
}

func (x *CreateCompanyRequest) SetPhoto(v string) {
	x.xxx_hidden_Photo = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 7)
}

func (x *CreateCompanyRequest) SetStand(v string) {
	x.xxx_hidden_Stand = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 7)
}

func (x *CreateCompanyRequest) SetAddress(v *Location) {
	x.xxx_hidden_Address = v
}

func (x *CreateCompanyRequest) SetDescription(v string) {
	x.xxx_hidden_Description = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 7)
}

func (x *CreateCompanyRequest) SetInterests(v []*common.Interest) {
	x.xxx_hidden_Interests = &v
}

func (x *CreateCompanyRequest) SetContractTypes(v []*common.ContractType) {
	x.xxx_hidden_ContractTypes = &v
}

func (x *CreateCompanyRequest) HasName() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *CreateCompanyRequest) HasPhoto() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *CreateCompanyRequest) HasStand() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *CreateCompanyRequest) HasAddress() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Address != nil
}

func (x *CreateCompanyRequest) HasDescription() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *CreateCompanyRequest) ClearName() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Name = nil
}

func (x *CreateCompanyRequest) ClearPhoto() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Photo = nil
}

func (x *CreateCompanyRequest) ClearStand() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_Stand = nil
}

func (x *CreateCompanyRequest) ClearAddress() {
	x.xxx_hidden_Address = nil
}

func (x *CreateCompanyRequest) ClearDescription() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_Description = nil
}

type CreateCompanyRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Name          *string
	Photo         *string
	Stand         *string
	Address       *Location
	Description   *string
	Interests     []*common.Interest
	ContractTypes []*common.ContractType
}

func (b0 CreateCompanyRequest_builder) Build() *CreateCompanyRequest {
	m0 := &CreateCompanyRequest{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Name != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 7)
		x.xxx_hidden_Name = b.Name
	}
	if b.Photo != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 7)
		x.xxx_hidden_Photo = b.Photo
	}
	if b.Stand != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 7)
		x.xxx_hidden_Stand = b.Stand
	}
	x.xxx_hidden_Address = b.Address
	if b.Description != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 7)
		x.xxx_hidden_Description = b.Description
	}
	x.xxx_hidden_Interests = &b.Interests
	x.xxx_hidden_ContractTypes = &b.ContractTypes
	return m0
}

type CreateCompanyResponse struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Id *common.Id             `protobuf:"bytes,1,opt,name=id"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateCompanyResponse) Reset() {
	*x = CreateCompanyResponse{}
	mi := &file_hestia_jobfair_company_v1_companies_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateCompanyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCompanyResponse) ProtoMessage() {}

func (x *CreateCompanyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hestia_jobfair_company_v1_companies_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *CreateCompanyResponse) GetId() *common.Id {
	if x != nil {
		return x.xxx_hidden_Id
	}
	return nil
}

func (x *CreateCompanyResponse) SetId(v *common.Id) {
	x.xxx_hidden_Id = v
}

func (x *CreateCompanyResponse) HasId() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Id != nil
}

func (x *CreateCompanyResponse) ClearId() {
	x.xxx_hidden_Id = nil
}

type CreateCompanyResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Id *common.Id
}

func (b0 CreateCompanyResponse_builder) Build() *CreateCompanyResponse {
	m0 := &CreateCompanyResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Id = b.Id
	return m0
}

type GetCompaniesRequest struct {
	state                           protoimpl.MessageState                    `protogen:"opaque.v1"`
	xxx_hidden_AlphabeticPagination *GetCompaniesRequest_AlphabeticPagination `protobuf:"bytes,1,opt,name=alphabetic_pagination,json=alphabeticPagination"`
	unknownFields                   protoimpl.UnknownFields
	sizeCache                       protoimpl.SizeCache
}

func (x *GetCompaniesRequest) Reset() {
	*x = GetCompaniesRequest{}
	mi := &file_hestia_jobfair_company_v1_companies_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCompaniesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCompaniesRequest) ProtoMessage() {}

func (x *GetCompaniesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hestia_jobfair_company_v1_companies_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *GetCompaniesRequest) GetAlphabeticPagination() *GetCompaniesRequest_AlphabeticPagination {
	if x != nil {
		return x.xxx_hidden_AlphabeticPagination
	}
	return nil
}

func (x *GetCompaniesRequest) SetAlphabeticPagination(v *GetCompaniesRequest_AlphabeticPagination) {
	x.xxx_hidden_AlphabeticPagination = v
}

func (x *GetCompaniesRequest) HasAlphabeticPagination() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_AlphabeticPagination != nil
}

func (x *GetCompaniesRequest) ClearAlphabeticPagination() {
	x.xxx_hidden_AlphabeticPagination = nil
}

type GetCompaniesRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	AlphabeticPagination *GetCompaniesRequest_AlphabeticPagination
}

func (b0 GetCompaniesRequest_builder) Build() *GetCompaniesRequest {
	m0 := &GetCompaniesRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_AlphabeticPagination = b.AlphabeticPagination
	return m0
}

type GetCompaniesResponse struct {
	state                protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Companies *[]*Company            `protobuf:"bytes,1,rep,name=companies"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *GetCompaniesResponse) Reset() {
	*x = GetCompaniesResponse{}
	mi := &file_hestia_jobfair_company_v1_companies_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCompaniesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCompaniesResponse) ProtoMessage() {}

func (x *GetCompaniesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hestia_jobfair_company_v1_companies_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *GetCompaniesResponse) GetCompanies() []*Company {
	if x != nil {
		if x.xxx_hidden_Companies != nil {
			return *x.xxx_hidden_Companies
		}
	}
	return nil
}

func (x *GetCompaniesResponse) SetCompanies(v []*Company) {
	x.xxx_hidden_Companies = &v
}

type GetCompaniesResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Companies []*Company
}

func (b0 GetCompaniesResponse_builder) Build() *GetCompaniesResponse {
	m0 := &GetCompaniesResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Companies = &b.Companies
	return m0
}

type GetCompanyRequest struct {
	state              protoimpl.MessageState      `protogen:"opaque.v1"`
	xxx_hidden_Company isGetCompanyRequest_Company `protobuf_oneof:"company"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *GetCompanyRequest) Reset() {
	*x = GetCompanyRequest{}
	mi := &file_hestia_jobfair_company_v1_companies_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCompanyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCompanyRequest) ProtoMessage() {}

func (x *GetCompanyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hestia_jobfair_company_v1_companies_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *GetCompanyRequest) GetId() *common.Id {
	if x != nil {
		if x, ok := x.xxx_hidden_Company.(*getCompanyRequest_Id); ok {
			return x.Id
		}
	}
	return nil
}

func (x *GetCompanyRequest) GetName() string {
	if x != nil {
		if x, ok := x.xxx_hidden_Company.(*getCompanyRequest_Name); ok {
			return x.Name
		}
	}
	return ""
}

func (x *GetCompanyRequest) GetStand() uint32 {
	if x != nil {
		if x, ok := x.xxx_hidden_Company.(*getCompanyRequest_Stand); ok {
			return x.Stand
		}
	}
	return 0
}

func (x *GetCompanyRequest) SetId(v *common.Id) {
	if v == nil {
		x.xxx_hidden_Company = nil
		return
	}
	x.xxx_hidden_Company = &getCompanyRequest_Id{v}
}

func (x *GetCompanyRequest) SetName(v string) {
	x.xxx_hidden_Company = &getCompanyRequest_Name{v}
}

func (x *GetCompanyRequest) SetStand(v uint32) {
	x.xxx_hidden_Company = &getCompanyRequest_Stand{v}
}

func (x *GetCompanyRequest) HasCompany() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Company != nil
}

func (x *GetCompanyRequest) HasId() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Company.(*getCompanyRequest_Id)
	return ok
}

func (x *GetCompanyRequest) HasName() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Company.(*getCompanyRequest_Name)
	return ok
}

func (x *GetCompanyRequest) HasStand() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Company.(*getCompanyRequest_Stand)
	return ok
}

func (x *GetCompanyRequest) ClearCompany() {
	x.xxx_hidden_Company = nil
}

func (x *GetCompanyRequest) ClearId() {
	if _, ok := x.xxx_hidden_Company.(*getCompanyRequest_Id); ok {
		x.xxx_hidden_Company = nil
	}
}

func (x *GetCompanyRequest) ClearName() {
	if _, ok := x.xxx_hidden_Company.(*getCompanyRequest_Name); ok {
		x.xxx_hidden_Company = nil
	}
}

func (x *GetCompanyRequest) ClearStand() {
	if _, ok := x.xxx_hidden_Company.(*getCompanyRequest_Stand); ok {
		x.xxx_hidden_Company = nil
	}
}

const GetCompanyRequest_Company_not_set_case case_GetCompanyRequest_Company = 0
const GetCompanyRequest_Id_case case_GetCompanyRequest_Company = 1
const GetCompanyRequest_Name_case case_GetCompanyRequest_Company = 2
const GetCompanyRequest_Stand_case case_GetCompanyRequest_Company = 3

func (x *GetCompanyRequest) WhichCompany() case_GetCompanyRequest_Company {
	if x == nil {
		return GetCompanyRequest_Company_not_set_case
	}
	switch x.xxx_hidden_Company.(type) {
	case *getCompanyRequest_Id:
		return GetCompanyRequest_Id_case
	case *getCompanyRequest_Name:
		return GetCompanyRequest_Name_case
	case *getCompanyRequest_Stand:
		return GetCompanyRequest_Stand_case
	default:
		return GetCompanyRequest_Company_not_set_case
	}
}

type GetCompanyRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Fields of oneof xxx_hidden_Company:
	Id    *common.Id
	Name  *string
	Stand *uint32
	// -- end of xxx_hidden_Company
}

func (b0 GetCompanyRequest_builder) Build() *GetCompanyRequest {
	m0 := &GetCompanyRequest{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Id != nil {
		x.xxx_hidden_Company = &getCompanyRequest_Id{b.Id}
	}
	if b.Name != nil {
		x.xxx_hidden_Company = &getCompanyRequest_Name{*b.Name}
	}
	if b.Stand != nil {
		x.xxx_hidden_Company = &getCompanyRequest_Stand{*b.Stand}
	}
	return m0
}

type case_GetCompanyRequest_Company protoreflect.FieldNumber

func (x case_GetCompanyRequest_Company) String() string {
	md := file_hestia_jobfair_company_v1_companies_proto_msgTypes[6].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isGetCompanyRequest_Company interface {
	isGetCompanyRequest_Company()
}

type getCompanyRequest_Id struct {
	Id *common.Id `protobuf:"bytes,1,opt,name=id,oneof"`
}

type getCompanyRequest_Name struct {
	Name string `protobuf:"bytes,2,opt,name=name,oneof"`
}

type getCompanyRequest_Stand struct {
	Stand uint32 `protobuf:"varint,3,opt,name=stand,oneof"`
}

func (*getCompanyRequest_Id) isGetCompanyRequest_Company() {}

func (*getCompanyRequest_Name) isGetCompanyRequest_Company() {}

func (*getCompanyRequest_Stand) isGetCompanyRequest_Company() {}

type GetCompanyResponse struct {
	state              protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Company *Company               `protobuf:"bytes,1,opt,name=company"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *GetCompanyResponse) Reset() {
	*x = GetCompanyResponse{}
	mi := &file_hestia_jobfair_company_v1_companies_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCompanyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCompanyResponse) ProtoMessage() {}

func (x *GetCompanyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hestia_jobfair_company_v1_companies_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *GetCompanyResponse) GetCompany() *Company {
	if x != nil {
		return x.xxx_hidden_Company
	}
	return nil
}

func (x *GetCompanyResponse) SetCompany(v *Company) {
	x.xxx_hidden_Company = v
}

func (x *GetCompanyResponse) HasCompany() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Company != nil
}

func (x *GetCompanyResponse) ClearCompany() {
	x.xxx_hidden_Company = nil
}

type GetCompanyResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Company *Company
}

func (b0 GetCompanyResponse_builder) Build() *GetCompanyResponse {
	m0 := &GetCompanyResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Company = b.Company
	return m0
}

type UpdateCompanyRequest struct {
	state              protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Company *Company               `protobuf:"bytes,1,opt,name=company"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *UpdateCompanyRequest) Reset() {
	*x = UpdateCompanyRequest{}
	mi := &file_hestia_jobfair_company_v1_companies_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateCompanyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCompanyRequest) ProtoMessage() {}

func (x *UpdateCompanyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hestia_jobfair_company_v1_companies_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *UpdateCompanyRequest) GetCompany() *Company {
	if x != nil {
		return x.xxx_hidden_Company
	}
	return nil
}

func (x *UpdateCompanyRequest) SetCompany(v *Company) {
	x.xxx_hidden_Company = v
}

func (x *UpdateCompanyRequest) HasCompany() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Company != nil
}

func (x *UpdateCompanyRequest) ClearCompany() {
	x.xxx_hidden_Company = nil
}

type UpdateCompanyRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Company *Company
}

func (b0 UpdateCompanyRequest_builder) Build() *UpdateCompanyRequest {
	m0 := &UpdateCompanyRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Company = b.Company
	return m0
}

type UpdateCompanyResponse struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Id *common.Id             `protobuf:"bytes,1,opt,name=id"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateCompanyResponse) Reset() {
	*x = UpdateCompanyResponse{}
	mi := &file_hestia_jobfair_company_v1_companies_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateCompanyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCompanyResponse) ProtoMessage() {}

func (x *UpdateCompanyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hestia_jobfair_company_v1_companies_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *UpdateCompanyResponse) GetId() *common.Id {
	if x != nil {
		return x.xxx_hidden_Id
	}
	return nil
}

func (x *UpdateCompanyResponse) SetId(v *common.Id) {
	x.xxx_hidden_Id = v
}

func (x *UpdateCompanyResponse) HasId() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Id != nil
}

func (x *UpdateCompanyResponse) ClearId() {
	x.xxx_hidden_Id = nil
}

type UpdateCompanyResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Id *common.Id
}

func (b0 UpdateCompanyResponse_builder) Build() *UpdateCompanyResponse {
	m0 := &UpdateCompanyResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Id = b.Id
	return m0
}

type GetCompaniesRequest_AlphabeticPagination struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_FromName    *string                `protobuf:"bytes,1,opt,name=from_name,json=fromName"`
	xxx_hidden_Limit       int32                  `protobuf:"varint,2,opt,name=limit"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *GetCompaniesRequest_AlphabeticPagination) Reset() {
	*x = GetCompaniesRequest_AlphabeticPagination{}
	mi := &file_hestia_jobfair_company_v1_companies_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCompaniesRequest_AlphabeticPagination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCompaniesRequest_AlphabeticPagination) ProtoMessage() {}

func (x *GetCompaniesRequest_AlphabeticPagination) ProtoReflect() protoreflect.Message {
	mi := &file_hestia_jobfair_company_v1_companies_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *GetCompaniesRequest_AlphabeticPagination) GetFromName() string {
	if x != nil {
		if x.xxx_hidden_FromName != nil {
			return *x.xxx_hidden_FromName
		}
		return ""
	}
	return ""
}

func (x *GetCompaniesRequest_AlphabeticPagination) GetLimit() int32 {
	if x != nil {
		return x.xxx_hidden_Limit
	}
	return 0
}

func (x *GetCompaniesRequest_AlphabeticPagination) SetFromName(v string) {
	x.xxx_hidden_FromName = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 2)
}

func (x *GetCompaniesRequest_AlphabeticPagination) SetLimit(v int32) {
	x.xxx_hidden_Limit = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 2)
}

func (x *GetCompaniesRequest_AlphabeticPagination) HasFromName() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *GetCompaniesRequest_AlphabeticPagination) HasLimit() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *GetCompaniesRequest_AlphabeticPagination) ClearFromName() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_FromName = nil
}

func (x *GetCompaniesRequest_AlphabeticPagination) ClearLimit() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Limit = 0
}

type GetCompaniesRequest_AlphabeticPagination_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	FromName *string
	Limit    *int32
}

func (b0 GetCompaniesRequest_AlphabeticPagination_builder) Build() *GetCompaniesRequest_AlphabeticPagination {
	m0 := &GetCompaniesRequest_AlphabeticPagination{}
	b, x := &b0, m0
	_, _ = b, x
	if b.FromName != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 2)
		x.xxx_hidden_FromName = b.FromName
	}
	if b.Limit != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 2)
		x.xxx_hidden_Limit = *b.Limit
	}
	return m0
}

var File_hestia_jobfair_company_v1_companies_proto protoreflect.FileDescriptor

var file_hestia_jobfair_company_v1_companies_proto_rawDesc = string([]byte{
	0x0a, 0x29, 0x68, 0x65, 0x73, 0x74, 0x69, 0x61, 0x2f, 0x6a, 0x6f, 0x62, 0x66, 0x61, 0x69, 0x72,
	0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x69, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x68, 0x65, 0x73,
	0x74, 0x69, 0x61, 0x2e, 0x6a, 0x6f, 0x62, 0x66, 0x61, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x2e, 0x76, 0x31, 0x1a, 0x21, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x67, 0x6f, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x68, 0x65, 0x73, 0x74, 0x69,
	0x61, 0x2f, 0x6a, 0x6f, 0x62, 0x66, 0x61, 0x69, 0x72, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x97, 0x01, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x05,
	0xaa, 0x01, 0x02, 0x08, 0x02, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x21,
	0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x05, 0xaa, 0x01, 0x02, 0x08, 0x02, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x12, 0x26, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x05, 0xaa, 0x01, 0x02, 0x08, 0x02, 0x52, 0x0a, 0x70,
	0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x07, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x05, 0xaa, 0x01, 0x02, 0x08,
	0x02, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x22, 0xd5, 0x02, 0x0a, 0x07, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x15, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x05, 0xaa, 0x01, 0x02, 0x08, 0x02, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x05, 0xaa, 0x01, 0x02,
	0x08, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x74,
	0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x27,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x05, 0xaa, 0x01, 0x02, 0x08, 0x02, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x65, 0x73, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x68, 0x65, 0x73,
	0x74, 0x69, 0x61, 0x2e, 0x6a, 0x6f, 0x62, 0x66, 0x61, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x52, 0x09,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x73, 0x12, 0x4d, 0x0a, 0x0e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x68, 0x65, 0x73, 0x74, 0x69, 0x61, 0x2e, 0x6a, 0x6f, 0x62, 0x66, 0x61,
	0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x69, 0x73, 0x69,
	0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x76, 0x69, 0x73, 0x69, 0x74,
	0x65, 0x64, 0x22, 0xcf, 0x02, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1b, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x05,
	0xaa, 0x01, 0x02, 0x08, 0x01, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x12, 0x3d, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x68, 0x65, 0x73, 0x74, 0x69, 0x61, 0x2e, 0x6a, 0x6f, 0x62,
	0x66, 0x61, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x68, 0x65, 0x73, 0x74, 0x69, 0x61, 0x2e,
	0x6a, 0x6f, 0x62, 0x66, 0x61, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x65, 0x73, 0x74, 0x73, 0x12, 0x4d, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x68, 0x65, 0x73, 0x74, 0x69, 0x61, 0x2e, 0x6a, 0x6f, 0x62, 0x66, 0x61, 0x69, 0x72, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x22, 0x45, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x68, 0x65, 0x73, 0x74,
	0x69, 0x61, 0x2e, 0x6a, 0x6f, 0x62, 0x66, 0x61, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x22, 0xda, 0x01, 0x0a, 0x13,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x78, 0x0a, 0x15, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x62, 0x65, 0x74, 0x69,
	0x63, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x43, 0x2e, 0x68, 0x65, 0x73, 0x74, 0x69, 0x61, 0x2e, 0x6a, 0x6f, 0x62, 0x66,
	0x61, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x62, 0x65, 0x74, 0x69, 0x63, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x62, 0x65,
	0x74, 0x69, 0x63, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x49, 0x0a,
	0x14, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x62, 0x65, 0x74, 0x69, 0x63, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x58, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x40, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x68, 0x65, 0x73, 0x74, 0x69, 0x61, 0x2e, 0x6a, 0x6f, 0x62,
	0x66, 0x61, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69,
	0x65, 0x73, 0x22, 0x7c, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x68, 0x65, 0x73, 0x74, 0x69, 0x61, 0x2e, 0x6a, 0x6f, 0x62,
	0x66, 0x61, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x64, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x22, 0x52, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x68, 0x65, 0x73, 0x74, 0x69, 0x61,
	0x2e, 0x6a, 0x6f, 0x62, 0x66, 0x61, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x07, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x22, 0x54, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x07,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x68, 0x65, 0x73, 0x74, 0x69, 0x61, 0x2e, 0x6a, 0x6f, 0x62, 0x66, 0x61, 0x69, 0x72, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x22, 0x45, 0x0a, 0x15, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x68, 0x65, 0x73, 0x74, 0x69, 0x61, 0x2e, 0x6a, 0x6f, 0x62, 0x66, 0x61, 0x69, 0x72,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69,
	0x64, 0x32, 0xd4, 0x03, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x72, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x2f, 0x2e, 0x68, 0x65, 0x73, 0x74, 0x69, 0x61, 0x2e, 0x6a,
	0x6f, 0x62, 0x66, 0x61, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x68, 0x65, 0x73, 0x74, 0x69, 0x61, 0x2e,
	0x6a, 0x6f, 0x62, 0x66, 0x61, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6f, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x12, 0x2e, 0x2e, 0x68, 0x65, 0x73, 0x74, 0x69,
	0x61, 0x2e, 0x6a, 0x6f, 0x62, 0x66, 0x61, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x68, 0x65, 0x73, 0x74, 0x69,
	0x61, 0x2e, 0x6a, 0x6f, 0x62, 0x66, 0x61, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x69, 0x0a, 0x0a, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x2c, 0x2e, 0x68, 0x65, 0x73, 0x74, 0x69, 0x61,
	0x2e, 0x6a, 0x6f, 0x62, 0x66, 0x61, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x68, 0x65, 0x73, 0x74, 0x69, 0x61, 0x2e, 0x6a,
	0x6f, 0x62, 0x66, 0x61, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x72, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x2f, 0x2e, 0x68, 0x65, 0x73, 0x74, 0x69, 0x61, 0x2e, 0x6a,
	0x6f, 0x62, 0x66, 0x61, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x68, 0x65, 0x73, 0x74, 0x69, 0x61, 0x2e,
	0x6a, 0x6f, 0x62, 0x66, 0x61, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x27, 0x5a, 0x1d, 0x68, 0x65, 0x73, 0x74,
	0x69, 0x61, 0x2f, 0x6a, 0x6f, 0x62, 0x66, 0x61, 0x69, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70,
	0x62, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x92, 0x03, 0x05, 0xd2, 0x3e, 0x02, 0x10,
	0x03, 0x62, 0x08, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x70, 0xe8, 0x07,
})

var file_hestia_jobfair_company_v1_companies_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_hestia_jobfair_company_v1_companies_proto_goTypes = []any{
	(*Location)(nil),                                 // 0: hestia.jobfair.company.v1.Location
	(*Company)(nil),                                  // 1: hestia.jobfair.company.v1.Company
	(*CreateCompanyRequest)(nil),                     // 2: hestia.jobfair.company.v1.CreateCompanyRequest
	(*CreateCompanyResponse)(nil),                    // 3: hestia.jobfair.company.v1.CreateCompanyResponse
	(*GetCompaniesRequest)(nil),                      // 4: hestia.jobfair.company.v1.GetCompaniesRequest
	(*GetCompaniesResponse)(nil),                     // 5: hestia.jobfair.company.v1.GetCompaniesResponse
	(*GetCompanyRequest)(nil),                        // 6: hestia.jobfair.company.v1.GetCompanyRequest
	(*GetCompanyResponse)(nil),                       // 7: hestia.jobfair.company.v1.GetCompanyResponse
	(*UpdateCompanyRequest)(nil),                     // 8: hestia.jobfair.company.v1.UpdateCompanyRequest
	(*UpdateCompanyResponse)(nil),                    // 9: hestia.jobfair.company.v1.UpdateCompanyResponse
	(*GetCompaniesRequest_AlphabeticPagination)(nil), // 10: hestia.jobfair.company.v1.GetCompaniesRequest.AlphabeticPagination
	(*common.Interest)(nil),                          // 11: hestia.jobfair.common.v1.Interest
	(*common.ContractType)(nil),                      // 12: hestia.jobfair.common.v1.ContractType
	(*common.Id)(nil),                                // 13: hestia.jobfair.common.v1.Id
}
var file_hestia_jobfair_company_v1_companies_proto_depIdxs = []int32{
	11, // 0: hestia.jobfair.company.v1.Company.interests:type_name -> hestia.jobfair.common.v1.Interest
	12, // 1: hestia.jobfair.company.v1.Company.contract_types:type_name -> hestia.jobfair.common.v1.ContractType
	0,  // 2: hestia.jobfair.company.v1.CreateCompanyRequest.address:type_name -> hestia.jobfair.company.v1.Location
	11, // 3: hestia.jobfair.company.v1.CreateCompanyRequest.interests:type_name -> hestia.jobfair.common.v1.Interest
	12, // 4: hestia.jobfair.company.v1.CreateCompanyRequest.contract_types:type_name -> hestia.jobfair.common.v1.ContractType
	13, // 5: hestia.jobfair.company.v1.CreateCompanyResponse.id:type_name -> hestia.jobfair.common.v1.Id
	10, // 6: hestia.jobfair.company.v1.GetCompaniesRequest.alphabetic_pagination:type_name -> hestia.jobfair.company.v1.GetCompaniesRequest.AlphabeticPagination
	1,  // 7: hestia.jobfair.company.v1.GetCompaniesResponse.companies:type_name -> hestia.jobfair.company.v1.Company
	13, // 8: hestia.jobfair.company.v1.GetCompanyRequest.id:type_name -> hestia.jobfair.common.v1.Id
	1,  // 9: hestia.jobfair.company.v1.GetCompanyResponse.company:type_name -> hestia.jobfair.company.v1.Company
	1,  // 10: hestia.jobfair.company.v1.UpdateCompanyRequest.company:type_name -> hestia.jobfair.company.v1.Company
	13, // 11: hestia.jobfair.company.v1.UpdateCompanyResponse.id:type_name -> hestia.jobfair.common.v1.Id
	2,  // 12: hestia.jobfair.company.v1.CompanyService.CreateCompany:input_type -> hestia.jobfair.company.v1.CreateCompanyRequest
	4,  // 13: hestia.jobfair.company.v1.CompanyService.GetCompanies:input_type -> hestia.jobfair.company.v1.GetCompaniesRequest
	6,  // 14: hestia.jobfair.company.v1.CompanyService.GetCompany:input_type -> hestia.jobfair.company.v1.GetCompanyRequest
	8,  // 15: hestia.jobfair.company.v1.CompanyService.UpdateCompany:input_type -> hestia.jobfair.company.v1.UpdateCompanyRequest
	3,  // 16: hestia.jobfair.company.v1.CompanyService.CreateCompany:output_type -> hestia.jobfair.company.v1.CreateCompanyResponse
	5,  // 17: hestia.jobfair.company.v1.CompanyService.GetCompanies:output_type -> hestia.jobfair.company.v1.GetCompaniesResponse
	7,  // 18: hestia.jobfair.company.v1.CompanyService.GetCompany:output_type -> hestia.jobfair.company.v1.GetCompanyResponse
	9,  // 19: hestia.jobfair.company.v1.CompanyService.UpdateCompany:output_type -> hestia.jobfair.company.v1.UpdateCompanyResponse
	16, // [16:20] is the sub-list for method output_type
	12, // [12:16] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_hestia_jobfair_company_v1_companies_proto_init() }
func file_hestia_jobfair_company_v1_companies_proto_init() {
	if File_hestia_jobfair_company_v1_companies_proto != nil {
		return
	}
	file_hestia_jobfair_company_v1_companies_proto_msgTypes[6].OneofWrappers = []any{
		(*getCompanyRequest_Id)(nil),
		(*getCompanyRequest_Name)(nil),
		(*getCompanyRequest_Stand)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_hestia_jobfair_company_v1_companies_proto_rawDesc), len(file_hestia_jobfair_company_v1_companies_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_hestia_jobfair_company_v1_companies_proto_goTypes,
		DependencyIndexes: file_hestia_jobfair_company_v1_companies_proto_depIdxs,
		MessageInfos:      file_hestia_jobfair_company_v1_companies_proto_msgTypes,
	}.Build()
	File_hestia_jobfair_company_v1_companies_proto = out.File
	file_hestia_jobfair_company_v1_companies_proto_goTypes = nil
	file_hestia_jobfair_company_v1_companies_proto_depIdxs = nil
}
