// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: checkin.proto

package checkin

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	identity "hestia/jobfair/api/pb/identity"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Checkin_Checkin_FullMethodName            = "/hestia.jobfair.v1.checkin.Checkin/Checkin"
	Checkin_CheckinWithCompany_FullMethodName = "/hestia.jobfair.v1.checkin.Checkin/CheckinWithCompany"
	Checkin_Empty_FullMethodName              = "/hestia.jobfair.v1.checkin.Checkin/Empty"
)

// CheckinClient is the client API for Checkin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Check-in is the feature that allows the user to check-in to the event and share their information with the companies
type CheckinClient interface {
	Checkin(ctx context.Context, in *CheckinRequest, opts ...grpc.CallOption) (*identity.User, error)
	CheckinWithCompany(ctx context.Context, in *CheckinWithCompanyRequest, opts ...grpc.CallOption) (*identity.User, error)
	Empty(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type checkinClient struct {
	cc grpc.ClientConnInterface
}

func NewCheckinClient(cc grpc.ClientConnInterface) CheckinClient {
	return &checkinClient{cc}
}

func (c *checkinClient) Checkin(ctx context.Context, in *CheckinRequest, opts ...grpc.CallOption) (*identity.User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(identity.User)
	err := c.cc.Invoke(ctx, Checkin_Checkin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkinClient) CheckinWithCompany(ctx context.Context, in *CheckinWithCompanyRequest, opts ...grpc.CallOption) (*identity.User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(identity.User)
	err := c.cc.Invoke(ctx, Checkin_CheckinWithCompany_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkinClient) Empty(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Checkin_Empty_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CheckinServer is the server API for Checkin service.
// All implementations must embed UnimplementedCheckinServer
// for forward compatibility.
//
// Check-in is the feature that allows the user to check-in to the event and share their information with the companies
type CheckinServer interface {
	Checkin(context.Context, *CheckinRequest) (*identity.User, error)
	CheckinWithCompany(context.Context, *CheckinWithCompanyRequest) (*identity.User, error)
	Empty(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedCheckinServer()
}

// UnimplementedCheckinServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCheckinServer struct{}

func (UnimplementedCheckinServer) Checkin(context.Context, *CheckinRequest) (*identity.User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Checkin not implemented")
}
func (UnimplementedCheckinServer) CheckinWithCompany(context.Context, *CheckinWithCompanyRequest) (*identity.User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckinWithCompany not implemented")
}
func (UnimplementedCheckinServer) Empty(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Empty not implemented")
}
func (UnimplementedCheckinServer) mustEmbedUnimplementedCheckinServer() {}
func (UnimplementedCheckinServer) testEmbeddedByValue()                 {}

// UnsafeCheckinServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CheckinServer will
// result in compilation errors.
type UnsafeCheckinServer interface {
	mustEmbedUnimplementedCheckinServer()
}

func RegisterCheckinServer(s grpc.ServiceRegistrar, srv CheckinServer) {
	// If the following call pancis, it indicates UnimplementedCheckinServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Checkin_ServiceDesc, srv)
}

func _Checkin_Checkin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckinServer).Checkin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Checkin_Checkin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckinServer).Checkin(ctx, req.(*CheckinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Checkin_CheckinWithCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckinWithCompanyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckinServer).CheckinWithCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Checkin_CheckinWithCompany_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckinServer).CheckinWithCompany(ctx, req.(*CheckinWithCompanyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Checkin_Empty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckinServer).Empty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Checkin_Empty_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckinServer).Empty(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Checkin_ServiceDesc is the grpc.ServiceDesc for Checkin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Checkin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hestia.jobfair.v1.checkin.Checkin",
	HandlerType: (*CheckinServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Checkin",
			Handler:    _Checkin_Checkin_Handler,
		},
		{
			MethodName: "CheckinWithCompany",
			Handler:    _Checkin_CheckinWithCompany_Handler,
		},
		{
			MethodName: "Empty",
			Handler:    _Checkin_Empty_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "checkin.proto",
}
